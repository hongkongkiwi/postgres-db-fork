# PostgreSQL Database Fork Configuration
# This is a comprehensive example showing all available options.
# For a minimal configuration, you only need to specify source, destination, and target_database.

# =====================================
# SOURCE DATABASE CONFIGURATION
# =====================================
source:
  # Option 1: Use a connection URI (takes precedence over individual parameters)
  # uri: "postgresql://produser:prodpass@prod.example.com:5432/myapp_production?sslmode=require"

  # Option 2: Use individual connection parameters
  host: "prod.example.com"
  port: 5432
  username: "produser"
  password: "prodpassword" # pragma: allowlist secret
  database: "myapp_production"
  sslmode: "require"

# =====================================
# DESTINATION DATABASE CONFIGURATION
# =====================================
# If not specified, inherits from source configuration, but a host is recommended.
destination:
  # Option 1: Use a connection URI (takes precedence over individual parameters)
  # uri: "postgresql://devuser:devpass@dev.example.com:5432/?sslmode=prefer"

  # Option 2: Use individual connection parameters
  host: "dev.example.com"
  port: 5432
  username: "devuser"
  password: "devpassword" # pragma: allowlist secret
  sslmode: "prefer"

# =====================================
# TARGET DATABASE CONFIGURATION
# =====================================
# Target database name (supports template variables)
target_database: "myapp_pr_{{.PR_NUMBER}}"

# Drop target database if it already exists
drop_if_exists: true

# =====================================
# PERFORMANCE SETTINGS
# =====================================
# Number of parallel connections for data transfer
max_connections: 8

# Number of rows to transfer in each batch
chunk_size: 5000

# Maximum time for the entire operation
timeout: 60m

# =====================================
# DATA FILTERING
# =====================================
# Transfer only specific tables
# include_tables:
#   - "users"
#   - "products"

# Exclude specific tables from transfer
exclude_tables:
  - "audit_logs"
  - "session_data"

# =====================================
# TRANSFER MODE OPTIONS
# =====================================
# Transfer only database schema, no data
schema_only: false

# Transfer only data, no schema (schema must exist)
data_only: false

# =====================================
# OUTPUT & LOGGING
# =====================================
# Logging configuration
log_level: "info" # debug, info, warn, error

# Suppress all output except for the final result
quiet: false

# Output format for CI/CD
output_format: "text" # text, json

# Perform a dry run without making any changes
dry_run: false

# =====================================
# TEMPLATE VARIABLES
# =====================================
# Define custom variables for use in target_database name
template_vars:
  APP_NAME: "myapp"
  ENVIRONMENT: "preview"
  # Example using variables:
  # target_database: "{{.APP_NAME}}_{{.ENVIRONMENT}}_{{.PR_NUMBER}}"

# =====================================
# HOOKS & CALLBACKS
# =====================================
# Execute custom shell commands at various stages of the fork process.
# These are executed in the shell where the fork tool is run.
hooks:
  # Commands to run before the fork operation begins.
  pre_fork:
    - "echo 'Starting fork process...'"
    - "df -h"

  # Commands to run after a successful fork operation.
  post_fork:
    - "echo 'Fork completed successfully!'"
    - "./notify-slack.sh 'Database {{.TARGET_DATABASE}} is ready!'"

  # Commands to run if the fork operation fails.
  on_error:
    - "echo 'Fork failed. See logs for details.'"
    - "./alert-pagerduty.sh 'Fork of {{.SOURCE_DATABASE}} failed!'"
