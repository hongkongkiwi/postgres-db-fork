name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build and release'
        required: true
        default: 'v0.0.0-manual'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Extract version information
  version:
    name: Extract Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_short: ${{ steps.version.outputs.version_short }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi

          VERSION_SHORT="${VERSION#v}"
          IS_PRERELEASE=false

          if [[ "$VERSION" == *"-"* ]]; then
            IS_PRERELEASE=true
          fi

          {
            echo "version=$VERSION"
            echo "version_short=$VERSION_SHORT"
            echo "is_prerelease=$IS_PRERELEASE"
          } >> "$GITHUB_OUTPUT"

          echo "Version: $VERSION"
          echo "Version Short: $VERSION_SHORT"
          echo "Is Prerelease: $IS_PRERELEASE"

  # Build binaries for all platforms
  build:
    name: Build (${{ matrix.goos }}/${{ matrix.goarch }})
    runs-on: ${{ matrix.os }}
    needs: version
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            os: ubuntu-latest
          - goos: linux
            goarch: arm64
            os: ubuntu-latest
          - goos: darwin
            goarch: amd64
            os: macos-latest
          - goos: darwin
            goarch: arm64
            os: macos-latest
          - goos: windows
            goarch: amd64
            os: windows-latest
          - goos: freebsd
            goarch: amd64
            os: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-1.22-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-1.22-

      - name: Install dependencies
        run: |
          go mod download
          go mod tidy

      - name: Run tests
        run: go test -v ./... -short

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: "0"
        shell: bash
        run: |
          mkdir -p dist

          BINARY_NAME="postgres-db-fork-${{ needs.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}"

          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          go build \
            -ldflags="-s -w -X main.version=${{ needs.version.outputs.version }}" \
            -o "dist/${BINARY_NAME}" \
            main.go

      - name: Create archive (Unix)
        if: matrix.goos != 'windows'
        shell: bash
        run: |
          cd dist
          BINARY_NAME="postgres-db-fork-${{ needs.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          tar -czf "${BINARY_NAME}.tar.gz" "${BINARY_NAME}"

      - name: Create archive (Windows)
        if: matrix.goos == 'windows'
        shell: pwsh
        run: |
          cd dist
          $BINARY_NAME = "postgres-db-fork-${{ needs.version.outputs.version }}-" +
            "${{ matrix.goos }}-${{ matrix.goarch }}.exe"
          $ARCHIVE_NAME = "postgres-db-fork-${{ needs.version.outputs.version }}-" +
            "${{ matrix.goos }}-${{ matrix.goarch }}.zip"
          Compress-Archive -Path $BINARY_NAME -DestinationPath $ARCHIVE_NAME

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*
          retention-days: 7

  # Build and push Docker images
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: version
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.version.outputs.version }}
            type=raw,value=${{ needs.version.outputs.version_short }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Create GitHub release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [version, build, docker]
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.tar.gz" -o -name "*.zip" | while read -r file; do
            cp "$file" release-assets/
          done

          # Create checksums
          cd release-assets
          sha256sum ./* > checksums.txt

          ls -la

      - name: Generate release notes
        id: release_notes
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 "${{ needs.version.outputs.version }}"^ 2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            {
              echo "## Changes since $PREVIOUS_TAG"
              echo ""
              git log --pretty=format:"- %s (%h)" "${PREVIOUS_TAG}..${{ needs.version.outputs.version }}"
            } > release_notes.md
          else
            {
              echo "## Initial Release"
              echo ""
              echo "This is the initial release of postgres-db-fork."
            } > release_notes.md
          fi

          {
            echo ""
            echo "## Assets"
            echo ""
            echo "### Binaries"
            echo "Download the appropriate binary for your platform:"
            echo ""
          } >> release_notes.md

          cd release-assets
          find . -name "*.tar.gz" -o -name "*.zip" | while read -r file; do
            echo "- \`${file#./}\`" >> ../release_notes.md
          done

          {
            echo ""
            echo "### Docker Images"
            echo ""
            echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.version.outputs.version }}\`"
            echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`"
            echo ""
            echo "### Verification"
            echo ""
            echo "All release assets can be verified using the \`checksums.txt\` file:"
            echo ""
            echo "\`\`\`bash"
            echo "sha256sum -c checksums.txt"
            echo "\`\`\`"
          } >> ../release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.version.outputs.version }}
          name: Release ${{ needs.version.outputs.version }}
          body_path: release_notes.md
          files: release-assets/*
          prerelease: ${{ needs.version.outputs.is_prerelease }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update major version tag for GitHub Actions
        if: needs.version.outputs.is_prerelease == 'false'
        run: |
          VERSION="${{ needs.version.outputs.version }}"

          # Extract major version (e.g., v1.2.3 -> v1)
          MAJOR_VERSION=$(echo "$VERSION" | sed -E 's/^v([0-9]+)\..*/v\1/')

          echo "Creating/updating major version tag: $MAJOR_VERSION"

          # Delete existing major version tag if it exists
          git tag -d "$MAJOR_VERSION" 2>/dev/null || true
          git push origin ":refs/tags/$MAJOR_VERSION" 2>/dev/null || true

          # Create new major version tag pointing to this release
          git tag -f "$MAJOR_VERSION" "$VERSION"
          git push origin "$MAJOR_VERSION"

          echo "âœ… Major version tag $MAJOR_VERSION updated to point to $VERSION"

  # Notify on completion
  notify:
    name: Notify Release Completion
    runs-on: ubuntu-latest
    needs: [version, build, docker, release]
    if: always()

    steps:
      - name: Release Summary
        run: |
          {
            echo "## ðŸš€ Release Summary"
            echo ""
            echo "**Version:** ${{ needs.version.outputs.version }}"
            echo "**Prerelease:** ${{ needs.version.outputs.is_prerelease }}"
            echo ""
            echo "### ðŸ“¦ Build Status"
            echo "- Build: ${{ needs.build.result }}"
            echo "- Docker: ${{ needs.docker.result }}"
            echo "- Release: ${{ needs.release.result }}"
            echo ""
            echo "### ðŸ”— Links"
            RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/${{ needs.version.outputs.version }}"
            echo "- [Release Page](${RELEASE_URL})"
            echo "- [Docker Images](https://github.com/${{ github.repository }}/pkgs/container/postgres-db-fork)"
            echo ""
            if [ "${{ needs.version.outputs.is_prerelease }}" = "false" ]; then
              VERSION="${{ needs.version.outputs.version }}"
              MAJOR_VERSION=$(echo "$VERSION" | sed -E 's/^v([0-9]+)\..*/v\1/')
              echo "### ðŸŽ¯ GitHub Actions Usage"
              echo "Users can now reference this action using:"
              echo "- \`uses: ${{ github.repository }}@$VERSION\` (exact version)"
              echo "- \`uses: ${{ github.repository }}@$MAJOR_VERSION\` (major version)"
            fi
          } >> "$GITHUB_STEP_SUMMARY"
