---
name: "CI"

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]

# Cancel previous runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: read

jobs:
  lint:
    name: "Lint"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup Go"
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: "Run golangci-lint"
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1.6
          args: --timeout=10m

  test:
    name: "Test"
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres # pragma: allowlist secret
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup Go"
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: "Run tests"
        run: go test -v -race -coverprofile=coverage.out ./...
        env:
          POSTGRES_TEST_DB_HOST: localhost
          POSTGRES_TEST_DB_PORT: ${{ job.services.postgres.ports['5432'] }}
          POSTGRES_TEST_DB_USER: postgres
          POSTGRES_TEST_DB_PASSWORD: postgres # pragma: allowlist secret
          POSTGRES_TEST_DB_NAME: postgres

      - name: "Upload coverage"
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  integration-test:
    name: "Integration Tests"
    runs-on: ubuntu-latest
    needs: [lint, test]
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres # pragma: allowlist secret
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup Go"
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: "Setup test databases"
        run: | # pragma: allowlist secret
          PGPASSWORD=postgres psql -h localhost \
            -p ${{ job.services.postgres.ports['5432'] }} \
            -U postgres -d postgres \
            -c "CREATE DATABASE test_source;"
          PGPASSWORD=postgres psql -h localhost \
            -p ${{ job.services.postgres.ports['5432'] }} \
            -U postgres -d postgres \
            -c "CREATE DATABASE test_target;"
          PGPASSWORD=postgres psql -h localhost \
            -p ${{ job.services.postgres.ports['5432'] }} \
            -U postgres -d test_source \
            -c "CREATE TABLE users (id SERIAL PRIMARY KEY, name VARCHAR(100));"
          PGPASSWORD=postgres psql -h localhost \
            -p ${{ job.services.postgres.ports['5432'] }} \
            -U postgres -d test_source \
            -c "INSERT INTO users (name) VALUES ('Alice'), ('Bob'), ('Charlie');"

      - name: "Run integration tests"
        run: go test -v -tags=integration ./...
        env:
          POSTGRES_TEST_DB_HOST: localhost
          POSTGRES_TEST_DB_PORT: ${{ job.services.postgres.ports['5432'] }}
          POSTGRES_TEST_DB_USER: postgres
          POSTGRES_TEST_DB_PASSWORD: postgres # pragma: allowlist secret
          POSTGRES_TEST_SOURCE_DB: test_source
          POSTGRES_TEST_TARGET_DB: test_target

  e2e-test:
    name: "E2E Tests"
    runs-on: ubuntu-latest
    needs: [lint, test]
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres # pragma: allowlist secret
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup Go"
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: "Build application"
        run: go build -o postgres-db-fork .

      - name: "Setup test databases"
        run: | # pragma: allowlist secret
          PGPASSWORD=postgres psql -h localhost \
            -p ${{ job.services.postgres.ports['5432'] }} \
            -U postgres -d postgres \
            -c "CREATE DATABASE e2e_source;"
          PGPASSWORD=postgres psql -h localhost \
            -p ${{ job.services.postgres.ports['5432'] }} \
            -U postgres -d postgres \
            -c "CREATE DATABASE e2e_target;"
          PGPASSWORD=postgres psql -h localhost \
            -p ${{ job.services.postgres.ports['5432'] }} \
            -U postgres -d e2e_source \
            -c "CREATE TABLE products (id SERIAL PRIMARY KEY, name VARCHAR(100), price DECIMAL(10,2));"
          PGPASSWORD=postgres psql -h localhost \
            -p ${{ job.services.postgres.ports['5432'] }} \
            -U postgres -d e2e_source \
            -c "INSERT INTO products (name, price) VALUES ('Widget', 19.99), ('Gadget', 29.99);"

      - name: "Run E2E tests"
        run: go test -v -tags=e2e ./...
        env:
          POSTGRES_TEST_DB_HOST: localhost
          POSTGRES_TEST_DB_PORT: ${{ job.services.postgres.ports['5432'] }}
          POSTGRES_TEST_DB_USER: postgres
          POSTGRES_TEST_DB_PASSWORD: postgres # pragma: allowlist secret
          POSTGRES_TEST_SOURCE_DB: e2e_source
          POSTGRES_TEST_TARGET_DB: e2e_target
